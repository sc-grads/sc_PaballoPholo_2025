name: Deploy SSIS Package and Run Data Migration

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'HandsOnProjects/Timesheets/**'

env:
  SQL_SERVER: 'localhost'
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Projects'
  JOB_NAME: 'RunNewDataMigrationPackage'
  PACKAGE_NAME: 'DataMigrationFINAL.dtsx'

jobs:
  deploy-and-run:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug Working Directory and File Location
        shell: powershell
        run: |
          Write-Output "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          dir "$env:GITHUB_WORKSPACE\HandsOnProjects\Timesheets\bin\Development" -ErrorAction Continue

      - name: Create SSIS Catalog Folder (if not exists)
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB;
          BEGIN TRY
              IF NOT EXISTS (SELECT 1 FROM [catalog].[folders] WHERE name = '${{ env.SSIS_DEST_FOLDER }}')
              BEGIN
                  EXEC [catalog].[create_folder] @folder_name = N'${{ env.SSIS_DEST_FOLDER }}';
                  PRINT 'Created SSIS folder: ${{ env.SSIS_DEST_FOLDER }}';
              END
              ELSE
              BEGIN
                  PRINT 'Folder already exists: ${{ env.SSIS_DEST_FOLDER }}';
              END
          END TRY
          BEGIN CATCH
              THROW;
          END CATCH
          "@
          sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql"

      - name: Deploy SSIS ISPAC via T-SQL
        shell: powershell
        run: |
          $ispacPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ env.SSIS_SOURCE_PATH }}"
          if (-not (Test-Path $ispacPath)) {
              Write-Error "ISPAC file not found at: $ispacPath"
              exit 1
          }

          Write-Output "Reading ISPAC file: $ispacPath"
          $binaryContent = [System.IO.File]::ReadAllBytes($ispacPath)
          $hexString = ($binaryContent | ForEach-Object { $_.ToString('X2') }) -join ''

          $tempSqlFile = Join-Path $env:GITHUB_WORKSPACE "deploy_project.sql"
          $sqlContent = @"
          DECLARE @ispac varbinary(max) = 0x$hexString;
          EXEC [SSISDB].[catalog].[deploy_project]
              @folder_name=N'${{ env.SSIS_DEST_FOLDER }}',
              @project_name=N'${{ env.SSIS_PROJECTS_FOLDER }}',
              @project_stream=@ispac;
          "@

          Write-Output "Writing SQL script to file: $tempSqlFile"
          Set-Content -Path $tempSqlFile -Value $sqlContent -Force

          Write-Output "Executing SQL script file with sqlcmd..."
          sqlcmd -S "${{ env.SQL_SERVER }}" -i $tempSqlFile

          if ($LASTEXITCODE -ne 0) {
              Write-Error "sqlcmd failed with code $LASTEXITCODE"
              exit $LASTEXITCODE
          }

          Write-Output "ISPAC deployed successfully to SSISDB/${{ env.SSIS_DEST_FOLDER }}/${{ env.SSIS_PROJECTS_FOLDER }}"

      - name: Create SQL Agent Job
        shell: powershell
        run: |
          $sql = @"
          USE [msdb];
          IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = '${{ env.JOB_NAME }}')
          BEGIN
              EXEC sp_add_job @job_name = N'${{ env.JOB_NAME }}';
              EXEC sp_add_jobstep
                  @job_name = N'${{ env.JOB_NAME }}',
                  @step_name = N'Run Data Migration',
                  @subsystem = N'SSIS',
                  @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECTS_FOLDER }}\${{ env.PACKAGE_NAME }}\"" /SERVER "${{ env.SQL_SERVER }}"',
                  @database_name = N'master';
              EXEC sp_add_jobserver @job_name = N'${{ env.JOB_NAME }}';
              PRINT 'Created new SQL Agent job: ${{ env.JOB_NAME }}';
          END
          ELSE
          BEGIN
              PRINT 'Job already exists: ${{ env.JOB_NAME }}';
          END
          "@
          sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql"

      - name: Run Data Migration Job
        shell: powershell
        run: |
          $sql = "EXEC msdb.dbo.sp_start_job @job_name = N'${{ env.JOB_NAME }}'; PRINT 'Job started: ${{ env.JOB_NAME }}';"
          sqlcmd -S "${{ env.SQL_SERVER }}" -Q $sql
