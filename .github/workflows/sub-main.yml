name: Deploy SSIS Package and Run Data Migration

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'HandsOnProjects/Timesheets/**'

env:
  SQL_SERVER: 'localhost'
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: 'NewDataMigration'
  SSIS_PROJECTS_FOLDER: 'Projects'
  JOB_NAME: 'RunNewDataMigrationPackage'
  PACKAGE_NAME: 'DataMigrationFINAL.dtsx'

jobs:
  deploy-and-run:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify SSIS Tools (SQL 2022)
        shell: powershell
        run: |
          $ssisPath = "${env:ProgramFiles(x86)}\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          if (-not (Test-Path $ssisPath)) {
              Write-Error "SSIS Deployment Wizard not found at $ssisPath"
              exit 1
          }
          echo "SSIS_PATH=$ssisPath" >> $env:GITHUB_ENV
          Write-Output "Verified SSIS tools at: $ssisPath"

      - name: Debug Working Directory and File Location
        shell: powershell
        run: |
          Write-Output "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          dir "$env:GITHUB_WORKSPACE\HandsOnProjects\Timesheets\bin\Development" -Recurse -ErrorAction Continue

      - name: Create SSIS Catalog Folder (if not exists)
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB
          GO
          SET NOCOUNT ON;
          BEGIN TRY
              IF NOT EXISTS (SELECT 1 FROM [catalog].[folders] WHERE name = '${{ env.SSIS_DEST_FOLDER }}')
              BEGIN
                  EXEC [catalog].[create_folder] @folder_name = N'${{ env.SSIS_DEST_FOLDER }}';
                  SELECT 'Folder created: ${{ env.SSIS_DEST_FOLDER }}' AS Result;
              END
              ELSE
              BEGIN
                  SELECT 'Folder already exists: ${{ env.SSIS_DEST_FOLDER }}' AS Result;
              END
          END TRY
          BEGIN CATCH
              SELECT ERROR_MESSAGE() AS ErrorMessage;
              THROW;
          END CATCH
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql" -h -1 -W -o "folder_creation.log" 2>&1
          $logContent = Get-Content "folder_creation.log" -Raw
          Write-Output "Folder creation log: $logContent"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create SSIS catalog folder. Exit code: $LASTEXITCODE. Log: $logContent"
              exit $LASTEXITCODE
          }
          if ($logContent -match "Folder created:" -or $logContent -match "Folder already exists:") {
              Write-Output "Verified folder creation or existence: ${{ env.SSIS_DEST_FOLDER }}"
          } else {
              Write-Error "Unexpected result: $logContent"
              exit 1
          }
          Start-Sleep -Seconds 30

      - name: Verify SSIS Catalog State
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB
          GO
          SELECT 'Folders' AS ObjectType, name AS Name, NULL AS ProjectName
          FROM [catalog].[folders]
          UNION ALL
          SELECT 'Projects' AS ObjectType, f.name AS FolderName, p.name AS ProjectName
          FROM [catalog].[folders] f
          LEFT JOIN [catalog].[projects] p ON f.folder_id = p.folder_id
          WHERE f.name = '${{ env.SSIS_DEST_FOLDER }}'
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql" -h -1 -W -o "catalog_state.log" 2>&1
          $logContent = Get-Content "catalog_state.log" -Raw
          Write-Output "SSISDB catalog state log: $logContent"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to query SSIS catalog state. Exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          if ($logContent -notmatch "${{ env.SSIS_DEST_FOLDER }}") {
              Write-Error "Folder ${{ env.SSIS_DEST_FOLDER }} not found in SSISDB"
              exit 1
          }

      - name: Deploy SSIS Package
        shell: powershell
        run: |
          $sourcePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac"
          $sourcePath = $sourcePath.Replace('/', '\')
          if (-not (Test-Path $sourcePath)) {
              Write-Error "SSIS package not found at: $sourcePath"
              exit 1
          }
          Write-Output "Deploying package from: $sourcePath"
          $destinationPath = "/SSISDB/${{ env.SSIS_DEST_FOLDER }}/${{ env.SSIS_PROJECTS_FOLDER }}"
          Write-Output "Destination path in SSISDB: $destinationPath"
          & "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\dtutil.exe" `
              "/SOURCESERVER" "${{ env.SQL_SERVER }}" `
              "/FILE" "$sourcePath" `
              "/COPY" "SQL;$destinationPath" `
              "/QUIET"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "SSIS deployment failed with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          Write-Output "SSIS package deployed successfully"

      - name: Create SQL Agent Job
        shell: powershell
        run: |
          $sql = @"
          USE [msdb]
          GO
          IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = '${{ env.JOB_NAME }}')
          BEGIN
              EXEC dbo.sp_add_job @job_name = N'${{ env.JOB_NAME }}';
              EXEC sp_add_jobstep
                  @job_name = N'${{ env.JOB_NAME }}',
                  @step_name = N'Run Data Migration',
                  @subsystem = N'SSIS',
                  @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECTS_FOLDER }}\${{ env.PACKAGE_NAME }}\"" /SERVER "${{ env.SQL_SERVER }}"',
                  @database_name = N'master';
              EXEC dbo.sp_add_jobserver @job_name = N'${{ env.JOB_NAME }}';
              SELECT 'Created new job: ${{ env.JOB_NAME }}' AS Result;
          END
          ELSE
          BEGIN
              SELECT 'Job already exists: ${{ env.JOB_NAME }}' AS Result;
          END
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql" -h -1 -W -o "job_creation.log" 2>&1
          $logContent = Get-Content "job_creation.log" -Raw
          Write-Output "Job creation log: $logContent"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create job. Exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }

      - name: Run Data Migration Job
        shell: powershell
        run: |
          $sql = @"
          EXEC msdb.dbo.sp_start_job @job_name = N'${{ env.JOB_NAME }}';
          SELECT 'Job started: ${{ env.JOB_NAME }}' AS Result;
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -Q "$sql" -h -1 -W -o "job_execution.log" 2>&1
          $logContent = Get-Content "job_execution.log" -Raw
          Write-Output "Job execution log: $logContent"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to start job. Exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          Write-Output "Job started successfully. Check SQL Agent for status."
