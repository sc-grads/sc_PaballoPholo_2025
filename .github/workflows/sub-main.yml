name: Deploy SSIS Package and Run Data Migration

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'HandsOnProjects/Timesheets/**'

env:
  SQL_SERVER: 'localhost'
  SSIS_SOURCE_PATH: 'HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac'
  SSIS_DEST_FOLDER: 'NewDataMigration'  # New folder name
  SSIS_PROJECT: 'NewTimesheets'        # New project name
  JOB_NAME: 'RunNewDataMigrationPackage'
  PACKAGE_NAME: 'DataMigrationFINAL.dtsx'

jobs:
  deploy-and-run:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify SSIS Tools (SQL 2022)
        shell: powershell
        run: |
          # Correct path for SQL Server 2022
          $ssisPath = "${env:ProgramFiles(x86)}\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          if (-not (Test-Path $ssisPath)) {
              Write-Error "SSIS Deployment Wizard not found at $ssisPath"
              exit 1
          }
          echo "SSIS_PATH=$ssisPath" >> $env:GITHUB_ENV
          Write-Output "Verified SSIS tools at: $ssisPath"

      - name: Debug Working Directory and File Location
        shell: powershell
        run: |
          Write-Output "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          dir "$env:GITHUB_WORKSPACE\HandsOnProjects\Timesheets\bin\Development" -Recurse -ErrorAction Continue

      - name: Create SSIS Catalog Folder (if not exists)
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB
          GO
          IF NOT EXISTS (SELECT 1 FROM [catalog].[folders] WHERE name = '${{ env.SSIS_DEST_FOLDER }}')
          BEGIN
              EXEC [catalog].[create_folder] @folder_name = N'${{ env.SSIS_DEST_FOLDER }}';
          END
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -Q "$sql"
          Write-Output "Folder creation result: $result"
          if ($LASTEXITCODE -eq 0) {
              Write-Output "Created folder: ${{ env.SSIS_DEST_FOLDER }} (if it didn't exist)"
              Start-Sleep -Seconds 20
          } else {
              Write-Error "Failed to create SSIS catalog folder. Exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }

      - name: Create SSIS Project (if not exists)
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB
          GO
          IF NOT EXISTS (SELECT 1 FROM [catalog].[projects] WHERE name = '${{ env.SSIS_PROJECT }}' AND folder_name = '${{ env.SSIS_DEST_FOLDER }}')
          BEGIN
              EXEC [catalog].[create_project] @folder_name = N'${{ env.SSIS_DEST_FOLDER }}', @project_name = N'${{ env.SSIS_PROJECT }}';
          END
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -Q "$sql"
          Write-Output "Project creation result: $result"
          if ($LASTEXITCODE -eq 0) {
              Write-Output "Created project: ${{ env.SSIS_PROJECT }} in folder ${{ env.SSIS_DEST_FOLDER }} (if it didn't exist)"
              Start-Sleep -Seconds 20
          } else {
              Write-Error "Failed to create SSIS project. Exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }

      - name: Verify SSIS Catalog State
        shell: powershell
        run: |
          $sql = @"
          USE SSISDB
          GO
          SELECT f.name AS FolderName, p.name AS ProjectName
          FROM [catalog].[folders] f
          LEFT JOIN [catalog].[projects] p ON f.folder_id = p.folder_id
          WHERE f.name = '${{ env.SSIS_DEST_FOLDER }}' AND p.name = '${{ env.SSIS_PROJECT }}'
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -Q "$sql" -h -1
          Write-Output "Catalog state: $result"

      - name: Validate SSIS Connection
        shell: powershell
        run: |
          $testPath = "/${{ env.SSIS_DEST_FOLDER }}/${{ env.SSIS_PROJECT }}"
          Write-Output "Testing connection to path: $testPath"
          $sql = @"
          USE SSISDB
          GO
          IF EXISTS (SELECT 1 FROM [catalog].[folders] f JOIN [catalog].[projects] p ON f.folder_id = p.folder_id WHERE f.name = '${{ env.SSIS_DEST_FOLDER }}' AND p.name = '${{ env.SSIS_PROJECT }}')
          BEGIN
              SELECT 'Connection Valid' AS Status
          END
          ELSE
          BEGIN
              SELECT 'Connection Invalid' AS Status
          END
          GO
          "@
          $result = sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -Q "$sql" -h -1
          Write-Output "Connection test result: $result"
          # Trim the result and check for "Connection Valid"
          $trimmedResult = $result.Trim()
          if ([string]::IsNullOrEmpty($trimmedResult) -or $trimmedResult -notmatch "Connection Valid") {
              Write-Error "SSIS catalog connection validation failed. Result: $trimmedResult"
              exit 1
          } else {
              Write-Output "SSIS catalog connection validated successfully"
          }

      - name: Deploy SSIS Package
        shell: powershell
        run: |
          # Use the full path from the repository root
          $sourcePath = (Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "HandsOnProjects/Timesheets/bin/Development/Timesheets.ispac").Replace('/', '\')
          if (-not (Test-Path $sourcePath)) {
              Write-Error "SSIS package not found at: $sourcePath"
              exit 1
          }
          Write-Output "Deploying package from: $sourcePath"
          Write-Output "Destination: ${{ env.SQL_SERVER }} | Folder: ${{ env.SSIS_DEST_FOLDER }} | Project: ${{ env.SSIS_PROJECT }}"

          & "$env:SSIS_PATH" /Silent `
            /SourcePath:"$sourcePath" `
            /DestinationServer:"${{ env.SQL_SERVER }}" `
            /DestinationPath:"/${{ env.SSIS_DEST_FOLDER }}/${{ env.SSIS_PROJECT }}" `
            /ModelType:Project

          if ($LASTEXITCODE -ne 0) {
              Write-Error "SSIS deployment failed with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          Write-Output "SSIS package deployed successfully"

      - name: Create SQL Agent Job
        shell: powershell
        run: |
          $sql = @"
          USE [msdb]
          GO
          IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = '${{ env.JOB_NAME }}')
          BEGIN
              EXEC dbo.sp_add_job @job_name = N'${{ env.JOB_NAME }}';
              
              EXEC sp_add_jobstep
                  @job_name = N'${{ env.JOB_NAME }}',
                  @step_name = N'Run Data Migration',
                  @subsystem = N'SSIS',
                  @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECT }}\${{ env.PACKAGE_NAME }}\"" /SERVER "${{ env.SQL_SERVER }}" /Par "\"\$SSISDB\${{ env.SSIS_DEST_FOLDER }}\${{ env.SSIS_PROJECT }}\${{ env.PACKAGE_NAME }}\"::ServerName(String)";"${{ env.SQL_SERVER }}" /CALLERINFO SQLAGENT /REPORTING E',
                  @database_name = N'master';
              
              EXEC dbo.sp_add_jobserver @job_name = N'${{ env.JOB_NAME }}';
              Write-Output "Created new job: ${{ env.JOB_NAME }}"
          END
          GO
          "@

          sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -Q "$sql"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to create job"
              exit $LASTEXITCODE
          }

      - name: Run Data Migration Job
        shell: powershell
        run: |
          sqlcmd -S "${{ env.SQL_SERVER }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" `
            -Q "EXEC msdb.dbo.sp_start_job @job_name='${{ env.JOB_NAME }}'"
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to start job"
              exit $LASTEXITCODE
          }
          Write-Output "Job started successfully. Check SQL Agent for status."
