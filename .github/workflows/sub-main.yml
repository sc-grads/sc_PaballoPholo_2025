name: Deploy SSIS Packages

on:
  repository_dispatch:
    types: [deploy_ssis]
  workflow_dispatch:

env:
  SSIS_PACKAGE_NAME: DataMigrationFINAL.dtsx
  SSIS_FOLDER_NAME: TimesheetDataMigration
  SSIS_PROJECT_NAME: Timesheets
  SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}
  SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}

jobs:
  deploy-ssis:
    runs-on: self-hosted  # <- your self-hosted runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy SSIS Package using DTExec
        run: |
          $packagePath = "${{ github.workspace }}\HandsOnProjects\Timesheets\${{ env.SSIS_PACKAGE_NAME }}"
          $server = "${{ env.SQL_SERVER_NAME }}"

          $sqlEnsureFolder = @"
          IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = N'${{ env.SSIS_FOLDER_NAME }}')
              EXEC catalog.create_folder @folder_name = N'${{ env.SSIS_FOLDER_NAME }}';
          "@
          Set-Content -Path EnsureFolder.sql -Value $sqlEnsureFolder
          sqlcmd -S $server -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d SSISDB -i EnsureFolder.sql

          $sqlEnsureProject = @"
          IF NOT EXISTS (
              SELECT 1 FROM catalog.projects p
              JOIN catalog.folders f ON p.folder_id = f.folder_id
              WHERE f.name = N'${{ env.SSIS_FOLDER_NAME }}' AND p.name = N'${{ env.SSIS_PROJECT_NAME }}'
          )
              EXEC catalog.create_project @folder_name = N'${{ env.SSIS_FOLDER_NAME }}', @project_name = N'${{ env.SSIS_PROJECT_NAME }}', @project_id = 0;
          "@
          Set-Content -Path EnsureProject.sql -Value $sqlEnsureProject
          sqlcmd -S $server -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}" -d SSISDB -i EnsureProject.sql

          DTExec.exe /F "$packagePath"
        shell: powershell

      - name: Create and Trigger SQL Agent Job
        run: |
          $jobSQL = @"
          USE msdb;
          IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = 'TimesheetProjectRun')
          BEGIN
              EXEC dbo.sp_add_job @job_name = N'TimesheetProjectRun';
              EXEC sp_add_jobstep
                  @job_name = N'TimesheetProjectRun',
                  @step_name = N'Run SSIS Package',
                  @subsystem = N'SSIS',
                  @command = N'/ISSERVER "\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::LOGGING_LEVEL(Int16)";1 /Par "$ServerOption::SYNCHRONIZED(Boolean)";True /CALLERINFO SQLAGENT /REPORTING E',
                  @database_name = N'master';
              EXEC dbo.sp_add_jobschedule
                  @job_name = N'TimesheetProjectRun',
                  @name = N'RunNow',
                  @enabled = 1,
                  @freq_type = 1,
                  @active_start_date = CONVERT(INT, CONVERT(VARCHAR, GETDATE(), 112)),
                  @active_start_time = CONVERT(INT, FORMAT(GETDATE(), 'HHmmss'));
              EXEC dbo.sp_add_jobserver @job_name = N'TimesheetProjectRun';
          END
          ELSE
          BEGIN
              EXEC sp_update_jobstep
                  @job_name = N'TimesheetProjectRun',
                  @step_id = 1,
                  @command = N'/ISSERVER "\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::LOGGING_LEVEL(Int16)";1 /Par "$ServerOption::SYNCHRONIZED(Boolean)";True /CALLERINFO SQLAGENT /REPORTING E';
          END
          EXEC msdb.dbo.sp_start_job @job_name = 'TimesheetProjectRun';
          "@
          echo $jobSQL | sqlcmd -S "${{ env.SQL_SERVER_NAME }}" -U "${{ env.SQL_USERNAME }}" -P "${{ env.SQL_PASSWORD }}"
        shell: powershell
