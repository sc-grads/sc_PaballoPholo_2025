name: Deploy TimesheetDB and Trigger SSIS Jobs
       on:
         push:
           branches:
             - main
           paths:
             - 'HandsOnProjects/SQL_Scripts/**'
             - 'HandsOnProjects/Timesheets/**'
         workflow_dispatch:

       env:
         DATABASE_NAME: TimesheetDB
         SSIS_FOLDER_NAME: TimesheetDataMigration
         SSIS_PROJECT_NAME: Projects/Timesheets/Packages
         SSIS_PACKAGE_NAME: DataMigrationFINAL.dtsx
         SQL_SERVER_NAME: ${{ secrets.SQL_SERVER_NAME }}

       jobs:
         deploy-database:
           runs-on: ubuntu-latest
           steps:
             # Checkout repository code
             - name: Checkout repository
               uses: actions/checkout@v4

             # Install SQL Server tools (sqlcmd) on the runner
             - name: Install SQL Server tools
               run: |
                 sudo apt-get update
                 sudo apt-get install -y curl gnupg
                 curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
                 curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
                 sudo apt-get update
                 sudo apt-get install -y mssql-tools unixodbc-dev
                 echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
                 source ~/.bashrc

             # Execute SQL Script to create database and tables
             - name: Execute SQL Script
               run: |
                 sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -E -d master -i HandsOnProjects/SQL_Scripts/TimesheetDB_Creation.sql

             # Trigger Sub-Main Workflow to deploy SSIS packages
             - name: Debug Dispatch
               run: |
                 echo "Dispatching event to sub-main workflow"
                 curl -v -X POST \
                   -H "Accept: application/vnd.github.v3+json" \
                   -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                   https://api.github.com/repos/${{ github.repository }}/dispatches \
                   -d '{"event_type":"deploy_ssis"}'
               shell: bash

             # Create or update SQL Server Agent Job
             - name: Setup SQL Server Agent Job
               run: |
                 set -e
                 cat << EOF > setup_job.sql
                 USE msdb;
                 IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = 'TimesheetProjectRun')
                 BEGIN
                     EXEC dbo.sp_add_job @job_name = N'TimesheetProjectRun';
                     EXEC sp_add_jobstep
                         @job_name = N'TimesheetProjectRun',
                         @step_name = N'Run SSIS Package',
                         @subsystem = N'SSIS',
                         @command = N'/ISSERVER "\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::LOGGING_LEVEL(Int16)";1 /Par "$ServerOption::SYNCHRONIZED(Boolean)";True /CALLERINFO SQLAGENT /REPORTING E',
                         @database_name = N'master';
                     EXEC dbo.sp_add_jobschedule
                         @job_name = N'TimesheetProjectRun',
                         @name = N'RunNow',
                         @enabled = 1,
                         @freq_type = 1,
                         @active_start_date = $(date +%Y%m%d),
                         @active_start_time = $(date +%H%M%S);
                     EXEC dbo.sp_add_jobserver @job_name = N'TimesheetProjectRun';
                 END
                 ELSE
                 BEGIN
                     EXEC sp_update_jobstep
                         @job_name = N'TimesheetProjectRun',
                         @step_id = 1,
                         @command = N'/ISSERVER "\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}" /SERVER "${{ env.SQL_SERVER_NAME }}" /Par "$ServerOption::LOGGING_LEVEL(Int16)";1 /Par "$ServerOption::SYNCHRONIZED(Boolean)";True /CALLERINFO SQLAGENT /REPORTING E';
                 END
                 EOF
                 sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -E -i setup_job.sql
               shell: bash

             # Execute SQL Server Agent Job
             - name: Execute SQL Server Agent Job
               run: |
                 sqlcmd -b -S "${{ env.SQL_SERVER_NAME }}" -E -Q "EXEC msdb.dbo.sp_start_job N'TimesheetProjectRun';"
               shell: bash
